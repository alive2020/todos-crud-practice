import axios from 'axios';
import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useState } from 'react';
import NewTodo from '../components/NewTodo';
import Pagination from '../components/Pagination';
import TodoList from '../components/TodoList';
import styles from '../styles/Home.module.css';

export default function Home() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [todos, setTodos] = useState([]);
  const [todo, setTodo] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [todosPerPage] = useState(10);
  console.log('todos add', todos);

  useEffect(() => {
    // let todosData = [];
    const loadTodos = async () => {
      const response = await axios.get(
        'https://jsonplaceholder.typicode.com/todos'
      );
      setTodos(response.data);
      console.log('todos', todos);
    };
    loadTodos();
  }, []);

  const indexOfLastTodo = currentPage * todosPerPage;
  const indexOfFirstTodo = indexOfLastTodo - todosPerPage;
  const currentTodos = todos.slice(indexOfFirstTodo, indexOfLastTodo);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const handleSave = (todo) => {
    let newArr = todos.filter((item) => item.id !== todo.id);
    newArr.unshift(todo);
    setTodos(newArr);
    setIsModalOpen(false);
    setTodo(null);
  };

  const handleDelete = (id) => {
    fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {
      method: 'DELETE',
    })
      .then((res) => res.json()) // or res.json()
      .then((res) => console.log('del', res));

    setTodos(todos.filter((todo) => todo.id !== id));
    // console.log('del', res);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1>My TODOS</h1>
        <button
          onClick={() => {
            setTodo(null);
            setIsModalOpen(true);
          }}
        >
          New TODO
        </button>
        {isModalOpen && (
          <NewTodo
            todo={todo}
            handleSave={(todo) => handleSave(todo)}
            setIsModalOpen={setIsModalOpen}
            setTodos={(val) => setTodos([val, ...todos])}
          />
        )}
        <div>
          <TodoList
            todos={currentTodos}
            setTodos={setTodos}
            handleDelete={handleDelete}
            handleEdit={(todo) => {
              setTodo(todo);
              setIsModalOpen(true);
            }}
          />
          <Pagination
            todosPerPage={todosPerPage}
            totalTodos={todos.length}
            paginate={paginate}
          />
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
          target='_blank'
          rel='noopener noreferrer'
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
